import tkinter as tk
from tkinter import ttk
import threading
from recorder import Recorder
from player import ActionPlayer
from PIL import Image, ImageTk
from pathlib import Path
from tkcode import CodeEditor
from tkinter import filedialog, messagebox
import shutil
import pyautogui
import time

class ActionRecorderApp:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("PyAutoGUI Macro Recorder")
        self.root.geometry("1200x800")
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_recording = False
        self.is_playing = False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.recorder = Recorder()
        self.recorder.root = self.root
        self.player = ActionPlayer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
        self.root.event_add('<<PlaybackFinished>>', 'None')
        self.root.event_add('<<PlaybackError>>', 'None')
        self.root.event_add('<<FailSafe>>', 'None')
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self.root.bind('<<PlaybackFinished>>', self.playback_finished)
        self.root.bind('<<PlaybackError>>', self.playback_error)
        self.root.bind('<<FailSafe>>', self.handle_failsafe)
        
        self.setup_ui()
    
    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_container = ttk.Frame(self.root)
        main_container.pack(fill=tk.BOTH, expand=True)
        
        # –í–µ—Ä—Ö–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        top_container = ttk.PanedWindow(main_container, orient=tk.HORIZONTAL)
        top_container.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–æ–¥–æ–º
        left_panel = ttk.Frame(top_container)
        top_container.add(left_panel, weight=1)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
        self.gallery_frame = ttk.Frame(top_container)
        top_container.add(self.gallery_frame, weight=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ—Ä–µ–π–º–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(left_panel)
        button_frame.pack(pady=10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        self.save_button = ttk.Button(
            button_frame,
            text="üíæ",
            width=3,
            command=self.save_project
        )
        self.save_button.pack(side=tk.LEFT, padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.play_button = ttk.Button(
            button_frame,
            text="‚ñ∂",
            width=3,
            command=self.start_playback
        )
        self.play_button.pack(side=tk.LEFT, padx=5)
        
        self.record_button = ttk.Button(
            button_frame,
            text="‚óè",
            width=3,
            command=self.start_recording
        )
        self.record_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(
            button_frame,
            text="\u25A0",  # Unicode —Å–∏–º–≤–æ–ª –¥–ª—è –∫–≤–∞–¥—Ä–∞—Ç–∞
            width=3,
            command=self.stop_action,
            state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞
        text_frame = ttk.Frame(left_panel)
        text_frame.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–¥–∞
        self.code_text = CodeEditor(
            text_frame,
            width=50,
            height=20,
            language="python",
            font="Consolas 10",
            highlighter="dracula",
            autofocus=True,
            blockcursor=True,
            insertofftime=0,
            padx=10,
            pady=10
        )
        
        # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–±–∞—Ä —Å–ø—Ä–∞–≤–∞
        scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.code_text.yview)
        
        # –†–∞–∑–º–µ—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
        self.code_text.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–æ–π –ø–∞–Ω–µ–ª–∏ (–≥–∞–ª–µ—Ä–µ—è)
        gallery_label = ttk.Label(self.gallery_frame, text="–°–∫—Ä–∏–Ω—à–æ—Ç—ã")
        gallery_label.pack(pady=5)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        self.screenshot_menu = tk.Menu(self.root, tearoff=0)
        self.screenshot_menu.add_command(label="–û–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç (Ctrl+V)", command=self.update_screenshot_from_clipboard)
        self.screenshot_menu.add_command(label="–°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–±–ª–∞—Å—Ç–∏ (Ctrl+N)", command=self.take_new_screenshot)
        
        # –°–æ–∑–¥–∞–µ–º —Ö–æ–ª—Å—Ç —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏
        self.gallery_canvas = tk.Canvas(self.gallery_frame)
        gallery_scrollbar = ttk.Scrollbar(self.gallery_frame, orient="vertical", 
                                        command=self.gallery_canvas.yview)
        
        self.gallery_content = ttk.Frame(self.gallery_canvas)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
        def _on_mousewheel(event):
            self.gallery_canvas.yview_scroll(int(-1*(event.delta/120)), "units")
        
        self.gallery_canvas.bind_all("<MouseWheel>", _on_mousewheel)
        self.gallery_content.bind("<Configure>", 
            lambda e: self.gallery_canvas.configure(scrollregion=self.gallery_canvas.bbox("all")))
        
        self.gallery_canvas.create_window((0, 0), window=self.gallery_content, anchor="nw")
        self.gallery_canvas.configure(yscrollcommand=gallery_scrollbar.set)
        
        self.gallery_canvas.pack(side="left", fill="both", expand=True)
        gallery_scrollbar.pack(side="right", fill="y")
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.gallery_frame.bind("<Configure>", self._on_gallery_resize)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤ –≤–Ω–∏–∑—É –æ–∫–Ω–∞
        log_frame = ttk.Frame(main_container)
        log_frame.pack(fill=tk.X, padx=5, pady=5)
        
        # –ú–µ—Ç–∫–∞ "–õ–æ–≥"
        log_label = ttk.Label(log_frame, text="–õ–æ–≥:")
        log_label.pack(anchor=tk.W)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤—ã—Å–æ—Ç—ã –¥–ª—è –ª–æ–≥–∞
        log_container = ttk.Frame(log_frame, height=200)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        log_container.pack(fill=tk.X)
        log_container.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
        self.log_text = tk.Text(log_container, height=10, font=("Consolas", 9))
        self.log_text.pack(fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –ª–æ–≥–æ–≤
        log_scrollbar = ttk.Scrollbar(self.log_text, orient=tk.VERTICAL, command=self.log_text.yview)
        log_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.log_text.config(yscrollcommand=log_scrollbar.set)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
        self.log_text.tag_configure('INFO', foreground='green')
        self.log_text.tag_configure('WARNING', foreground='orange')
        self.log_text.tag_configure('ERROR', foreground='red')
        
        # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
        self.log_text.config(state=tk.DISABLED)
    
    def _on_gallery_resize(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –≥–∞–ª–µ—Ä–µ–∏"""
        if hasattr(self, '_resize_timer'):
            self.root.after_cancel(self._resize_timer)
        self._resize_timer = self.root.after(100, self.update_gallery)
    
    def update_gallery(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–∞–ª–µ—Ä–µ–∏ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–æ–π"""
        # –û—á–∏—â–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
        for widget in self.gallery_content.winfo_children():
            widget.destroy()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = sorted(Path(self.recorder.screens_dir).glob("*.png"), 
                       key=lambda x: int(x.stem))
        
        if not images:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —à–∏—Ä–∏–Ω—É –≥–∞–ª–µ—Ä–µ–∏
        gallery_width = self.gallery_frame.winfo_width() - 20  # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        desired_columns = max(1, gallery_width // 200)  # –ü—Ä–∏–º–µ—Ä–Ω–æ 200 –ø–∏–∫—Å–µ–ª–µ–π –Ω–∞ –º–∏–Ω–∏—Ç—é—Ä—É
        thumbnail_width = (gallery_width - (desired_columns + 1) * 10) // desired_columns  # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º grid –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        for i in range(desired_columns):
            self.gallery_content.grid_columnconfigure(i, weight=1, uniform="column")
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ—Ç–∫–µ
        for i, img_path in enumerate(images):
            try:
                row = i // desired_columns
                col = i % desired_columns
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–¥–ø–∏—Å–∏
                frame = ttk.Frame(self.gallery_content)
                frame.grid(row=row, column=col, pady=5, padx=5, sticky="nsew")
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                img = Image.open(img_path)
                aspect_ratio = img.height / img.width
                thumbnail_height = int(thumbnail_width * aspect_ratio)
                img = img.resize((thumbnail_width, thumbnail_height), Image.Resampling.LANCZOS)
                photo = ImageTk.PhotoImage(img)
                
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                container = ttk.Frame(frame)
                container.pack(expand=True, fill="both")
                
                # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å
                label_img = ttk.Label(container, image=photo, cursor="hand2")
                label_img.image = photo
                label_img.pack(expand=True, fill="both")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                tooltip_text = "–ü–ö–ú - –º–µ–Ω—é\nCtrl+V - –≤—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞\nCtrl+N - –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç"
                label_img.bind("<Enter>", lambda e, text=tooltip_text: self.show_tooltip(e, text))
                label_img.bind("<Leave>", self.hide_tooltip)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                label_text = ttk.Label(container, 
                                     text=f"{img_path.name}\n–ü–ö–ú –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", 
                                     wraplength=thumbnail_width,
                                     justify="center")
                label_text.pack(pady=(5, 0))
                
                # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∏ –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
                label_img.bind("<Button-3>", lambda e, path=img_path: self.show_screenshot_menu(e, path))
                container.bind("<Control-v>", lambda e, path=img_path: self.update_screenshot_from_clipboard(path))
                container.bind("<Control-n>", lambda e, path=img_path: self.take_new_screenshot(path))
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {img_path}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        self.gallery_canvas.update_idletasks()
        self.gallery_canvas.configure(scrollregion=self.gallery_canvas.bbox("all"))
    
    def show_screenshot_menu(self, event, screenshot_path):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        self.current_screenshot_path = screenshot_path
        self.screenshot_menu.post(event.x_root, event.y_root)
    
    def update_screenshot_from_clipboard(self, screenshot_path=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞"""
        try:
            path = screenshot_path or self.current_screenshot_path
            if not path:
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
            from PIL import ImageGrab
            img = ImageGrab.grabclipboard()
            
            if img is None:
                messagebox.showwarning(
                    "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    "–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                )
                return
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img.save(path)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
            self.update_gallery()
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:\n{str(e)}")
    
    def take_new_screenshot(self, screenshot_path=None):
        """–î–µ–ª–∞–µ—Ç –Ω–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏"""
        try:
            path = screenshot_path or self.current_screenshot_path
            if not path:
                return
                
            # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ–∫–Ω–æ –Ω–∞ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
            self.root.iconify()
            self.root.after(500, lambda: self._take_screenshot(path))
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:\n{str(e)}")
    
    def _take_screenshot(self, path):
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
            screenshot = pyautogui.screenshot(region=pyautogui.select_area())
            screenshot.save(path)
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
            self.root.deiconify()
            self.update_gallery()
            
        except Exception as e:
            self.root.deiconify()
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç:\n{str(e)}")
    
    def start_recording(self):
        if not self.is_recording:
            # –û—á–∏—â–∞–µ–º –∫–æ–¥ –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å—å
            self.code_text.delete(1.0, tk.END)
            # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            for screenshot in Path(self.recorder.screens_dir).glob("*.png"):
                screenshot.unlink()
            # –û—á–∏—â–∞–µ–º –≥–∞–ª–µ—Ä–µ—é
            for widget in self.gallery_content.winfo_children():
                widget.destroy()
                
            self.is_recording = True
            self.update_button_states()
            self.recorder.start()
            
    def start_playback(self):
        if not self.is_playing and self.code_text.get(1.0, tk.END).strip():
            self.is_playing = True
            self.update_button_states()
            
            try:
                code = self.code_text.get(1.0, tk.END)
                if not code.strip():
                    return
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ª–æ–≥–æ–≤
                self.player.log_callback = self.add_log
                
                def play_thread():
                    try:
                        self.player.play(code)
                        if self.root.winfo_exists():
                            self.root.event_generate('<<PlaybackFinished>>')
                            self.add_log(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - INFO - Macro playback finished")
                    except pyautogui.FailSafeException:
                        if self.root.winfo_exists():
                            self.root.event_generate('<<FailSafe>>')
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏: {str(e)}")
                        if self.root.winfo_exists():
                            self.root.event_generate('<<PlaybackError>>')
                
                thread = threading.Thread(target=play_thread, daemon=True)
                thread.start()
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {str(e)}")
                self.is_playing = False
                self.update_button_states()
    
    def playback_finished(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.is_playing = False
        self.update_button_states()
    
    def playback_error(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.is_playing = False
        self.update_button_states()
        messagebox.showerror("–û—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –º–∞–∫—Ä–æ—Å–∞")
    
    def handle_failsafe(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∑–∞—â–∏—Ç—ã PyAutoGUI"""
        self.is_playing = False
        self.update_button_states()
        messagebox.showwarning(
            "–ü—Ä–µ—Ä–≤–∞–Ω–æ",
            "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–æ!\n\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –º—ã—à—å –ø–æ–ø–∞–ª–∞ –≤ —É–≥–æ–ª —ç–∫—Ä–∞–Ω–∞ (–∑–∞—â–∏—Ç–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º PyAutoGUI).\n\n"
            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —É–±–µ—Ä–∏—Ç–µ –º—ã—à—å –∏–∑ —É–≥–ª–∞ —ç–∫—Ä–∞–Ω–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞."
        )
    
    def stop_action(self):
        if self.is_recording:
            self.is_recording = False
            recorded_code = self.recorder.stop()
            self.code_text.delete(1.0, tk.END)
            self.code_text.insert(1.0, recorded_code)
            self.update_gallery()
        elif self.is_playing:
            self.is_playing = False
            self.player.stop()
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.root.event_generate('<<PlaybackFinished>>')
        self.update_button_states()
        
    def update_button_states(self):
        if self.is_recording or self.is_playing:
            self.play_button.config(state=tk.DISABLED)
            self.record_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
        else:
            self.play_button.config(state=tk.NORMAL)
            self.record_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            
    def save_project(self):
        if not self.code_text.get(1.0, tk.END).strip():
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –∫–æ–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
            return
            
        project_name = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç",
            initialdir="./projects",
            defaultextension=".py",
            filetypes=[("Python files", "*.py")]
        )
        
        if not project_name:
            return
            
        try:
            project_dir = Path(project_name).parent
            project_name = Path(project_name).stem
            project_path = project_dir / project_name
            project_path.mkdir(parents=True, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
            screens_path = project_path / "screens"
            screens_path.mkdir(exist_ok=True)
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
            for screenshot in Path(self.recorder.screens_dir).glob("*.png"):
                shutil.copy2(screenshot, screens_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥ –º–∞–∫—Ä–æ—Å–∞
            main_file = project_path / "main.py"
            with open(main_file, 'w', encoding='utf-8') as f:
                f.write(self.code_text.get(1.0, tk.END))
            
            messagebox.showinfo(
                "–£—Å–ø–µ—Ö", 
                f"–ü—Ä–æ–µ–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤:\n{project_path}\n\n"
                f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª:\n{main_file}"
            )
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–µ–∫—Ç:\n{str(e)}")
    
    def show_tooltip(self, event, text):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        x, y, _, _ = event.widget.bbox("insert")
        x += event.widget.winfo_rootx() + 25
        y += event.widget.winfo_rooty() + 20
        
        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
        self.tooltip = tk.Toplevel()
        self.tooltip.wm_overrideredirect(True)
        self.tooltip.wm_geometry(f"+{x}+{y}")
        
        label = ttk.Label(self.tooltip, text=text, justify='left',
                         background="#ffffe0", relief='solid', borderwidth=1)
        label.pack()
    
    def hide_tooltip(self, event=None):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É"""
        if hasattr(self, 'tooltip'):
            self.tooltip.destroy()
    
    def add_log(self, message, level='INFO'):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥"""
        self.log_text.config(state=tk.NORMAL)
        self.log_text.insert(tk.END, message + '\n', level)
        self.log_text.see(tk.END)  # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–µ
        self.log_text.config(state=tk.DISABLED)
    
    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    app = ActionRecorderApp()
    app.run()